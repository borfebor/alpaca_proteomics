{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#alpaca_proteomics-a-python-based-proteomics-pipeline","title":"\ud83d\udcca alpaca_proteomics: A Python-based Proteomics Pipeline","text":"<p><code>alpaca_proteomics</code> is a Python-based pipeline designed for Absolute Protein Quantification in proteomics research. It streamlines the analysis of mass spectrometry data, enabling accurate determination of protein abundances in complex biological samples. By supporting various proteomics data formats and employing robust statistical methods, it enhances the reliability of quantitative analyses.</p>"},{"location":"#key-features","title":"\ud83e\uddd1\u200d\ud83d\udd2c Key Features","text":""},{"location":"#1-data-import-and-pre-processing","title":"1. Data Import and Pre-processing","text":"<p>The pipeline facilitates the import and pre-processing of raw experimental data, transforming it into a clean, standardized format suitable for downstream analysis.</p>"},{"location":"#2-quantification","title":"2. Quantification","text":"<p>It offers functionalities for absolute protein quantification, allowing researchers to determine protein abundances accurately.</p>"},{"location":"#3-graphical-user-interface-gui","title":"3. Graphical User Interface (GUI)","text":"<p>For user-friendly interaction, a GUI is available, providing an intuitive interface for data analysis tasks.</p>"},{"location":"#installation","title":"\ud83d\udee0\ufe0f Installation","text":"<p>To get started, you can install the library via pip:</p> <pre><code>pip install alpaca-proteomics\n</code></pre>"},{"location":"enrich/","title":"Enrichment","text":""},{"location":"enrich/#alpacagathersdf-enrichment_standards-preparation-lfq_methodibaq-plotfalse-save_plotfalse","title":"<code>alpaca.gathers(df, enrichment_standards, preparation, lfq_method='iBAQ', plot=False, save_plot=False)</code>","text":"<p>Calculates enrichment factors for protein standards spiked into samples and optionally plots the results.</p> <p>Parameters:</p> <ul> <li> <p><code>df</code> (<code>pandas.DataFrame</code>):   DataFrame containing the quantified protein data (e.g., with iBAQ or LFQ values).</p> </li> <li> <p><code>enrichment_standards</code> (<code>pandas.DataFrame</code> or file-like object):   DataFrame or file containing the standard information for calculating enrichment.</p> </li> <li> <p><code>preparation</code> (<code>pandas.DataFrame</code>):   DataFrame containing information about the experimental preparation (e.g., conditions).</p> </li> <li> <p><code>lfq_method</code> (<code>str</code>, optional, default=<code>'iBAQ'</code>):   Label-free quantification method used in the analysis (e.g., 'iBAQ', 'LFQ').</p> </li> <li> <p><code>plot</code> (<code>bool</code>, optional, default=<code>False</code>):   Whether to plot the enrichment factors.</p> </li> <li> <p><code>save_plot</code> (<code>bool</code>, optional, default=<code>False</code>):   Whether to save the plot as a file.</p> </li> </ul> <p>Returns:</p> <ul> <li> <p><code>e_test</code> (<code>pandas.DataFrame</code>):   DataFrame containing calculated enrichment values for each sample.</p> </li> <li> <p><code>preparation</code> (<code>pandas.DataFrame</code>):   Updated preparation DataFrame with enrichment factors added.</p> </li> </ul> <p>Notes:</p> <ul> <li>The function calculates the enrichment factors by comparing the protein levels in the experimental samples to the spiked-in standards.</li> <li>It groups the data by experimental conditions and replicates to calculate median enrichment values.</li> <li>The function also optionally generates and saves a plot of the enrichment values.</li> </ul>"},{"location":"first/","title":"\ud83e\uddfc Data Pre-processing","text":"<p>Data import and pre-processing are foundational steps in proteomics analysis, ensuring that raw experimental data is transformed into a clean, standardized format for downstream analysis. In the context of <code>alpaca_proteomics</code>, these steps are critical and applicable for both relative and absolute quantification in quantitative proteomics.  </p> <p>Proper pre-processing removes contaminants, handles missing values, and normalizes datasets, minimizing technical variability and enhancing the accuracy of protein quantification. This ensures robust and reproducible results, enabling meaningful biological insights. The library streamlines these tasks, making it highly applicable for workflows involving large-scale proteomics data.</p>"},{"location":"first/#overview-of-the-workflow","title":"\ud83d\udd01 Overview of the Workflow","text":"<p>The pre-processing pipeline in <code>alpaca</code> consists of three main steps:</p> <ol> <li>Import raw data using <code>alpaca.eats()</code> </li> <li>Consult (Optional) an automated advisor via <code>alpaca.Consultant()</code> to choose optimal parameters</li> <li>Clean the dataset with <code>alpaca.spits()</code> </li> </ol>"},{"location":"first/#1-importing-data-with-alpacaeats","title":"\ud83d\udce5 1. Importing Data with <code>alpaca.eats()</code>","text":"<p>\ud83d\udcda Function Overview</p> <p><code>alpaca.eats()</code> ingests proteomics data files in various formats and returns a structured <code>pandas.DataFrame</code>.</p>"},{"location":"first/#alpacaeatsfile-inspecttrue","title":"<code>alpaca.eats(file, inspect=True)</code>","text":"<p>Loads proteomics data from a file in <code>.txt</code>, <code>.tsv</code>, <code>.csv</code>, or <code>.xlsx</code> format.</p> <p>Parameters:</p> <ul> <li> <p><code>file</code> (<code>str</code> or file-like):   Path to the data file or an open file object. Supported formats include:</p> <ul> <li><code>.txt</code> or <code>.tsv</code>: Tab-separated values  </li> <li><code>.csv</code>: Comma-separated values  </li> <li><code>.xlsx</code>: Excel spreadsheet</li> </ul> </li> <li> <p><code>inspect</code> (<code>bool</code>, default=<code>True</code>):   If <code>True</code>, the function tries to identify the column containing protein group IDs and the available intensity methods using <code>detective.alpacaHolmes</code>.</p> </li> </ul> <p>Returns:</p> <ul> <li> <p>If <code>inspect=True</code> and detection is successful:   Returns a tuple <code>(DataFrame, id_col, intensity_dict)</code></p> </li> <li> <p>If <code>inspect=True</code> but detection fails:   Returns the <code>DataFrame</code> with a warning message.</p> </li> <li> <p>If <code>inspect=False</code>:   Returns the <code>DataFrame</code> only.</p> </li> </ul> <p>Notes:</p> <ul> <li>If the file format is not recognized, the function prints a</li> </ul> <p>Example Usage:</p> <pre><code>from alpaca_proteomics import alpaca\n\nfile = \"results.csv\"\n\ndata = alpaca.eats(file)\n</code></pre>"},{"location":"first/#2-quantification-assistance-withalpacaconsultant","title":"\ud83d\udce5 2. Quantification assistance with<code>alpaca.Consultant()</code>","text":""},{"location":"first/#alpacaconsultantdf-st_proteins-it-added_samplesall-norm_optionsnone-relative-median-quantile-values_per_sample03","title":"<code>alpaca.Consultant(df, st_proteins, it, added_samples='all', norm_options=['None', 'Relative', 'Median', 'Quantile'], values_per_sample=0.3)</code>","text":"<p>Suggests the best normalization and intensity method for protein quantification based on regression performance with spiked-in standards.</p> <p>Parameters:</p> <ul> <li> <p><code>df</code> (<code>pandas.DataFrame</code>):   DataFrame containing the quantified protein data to be analyzed.</p> </li> <li> <p><code>st_proteins</code> (<code>pandas.DataFrame</code>):   DataFrame containing the spiked-in standards used for regression-based quantification.</p> </li> <li> <p><code>it</code> (<code>dict</code>):   Dictionary where keys are intensity methods (e.g., 'LFQ') and values are lists of corresponding sample names.</p> </li> <li> <p><code>added_samples</code> (<code>list</code> or <code>'all'</code>, default=<code>'all'</code>):   List of sample names to apply the analysis to. If <code>'all'</code>, applies to all samples.</p> </li> <li> <p><code>norm_options</code> (<code>list</code>, default=<code>['None', 'Relative', 'Median', 'Quantile']</code>):   List of normalization options to test during analysis.</p> </li> <li> <p><code>values_per_sample</code> (<code>float</code>, default=<code>0.3</code>):   Minimum proportion of valid values (non-missing) required per sample for analysis.</p> </li> </ul> <p>Returns:</p> <ul> <li><code>pandas.DataFrame</code>:   DataFrame with tested normalization and intensity methods, and their corresponding R\u00b2 scores.</li> </ul> <p>Notes:</p> <ul> <li>The function runs regression analysis for each combination of normalization and intensity method, evaluating the quality of fit using R\u00b2.</li> <li>Based on the highest R\u00b2 score, the function recommends the best combination of intensity method and normalization for protein quantification.</li> </ul>"},{"location":"first/#3-data-pre-processing-with-alpacaspits","title":"\ud83d\udce5 3. Data pre-processing with <code>alpaca.spits()</code>","text":""},{"location":"first/#alpacaspitsdata-lfq_method-id_colauto-replicate_dictauto-intensity_dictauto-info_colsnone-contamination_colsidentified-by-site-contaminant-reverse-cleaningtrue-formattingauto-transformationnplog2-normalizationnone-valid_values07-imputation-imp_kwargs","title":"<code>alpaca.spits(data, lfq_method, id_col='auto', replicate_dict='auto', intensity_dict='auto', info_cols=None, contamination_cols=['identified by site', 'contaminant', 'Reverse'], cleaning=True, formatting='auto', transformation=np.log2, normalization=None, valid_values=0.7, imputation='', **imp_kwargs)</code>","text":"<p>Processes a proteomics DataFrame for quantitative analysis, performing tasks such as cleaning, transformation, imputation, normalization, and formatting for downstream analysis or visualization.</p> <p>Parameters:</p> <ul> <li> <p><code>data</code> (<code>pandas.DataFrame</code>):   Input DataFrame containing the raw intensity data.</p> </li> <li> <p><code>lfq_method</code> (<code>str</code>):   Column name or label-free quantification (LFQ) method used to extract intensities.</p> </li> <li> <p><code>id_col</code> (<code>str</code>, default=<code>'auto'</code>):   Column name containing unique protein identifiers. If <code>'auto'</code>, it is inferred using <code>detective.alpacaHolmes</code>.</p> </li> <li> <p><code>replicate_dict</code> (<code>dict</code> or <code>'auto'</code>, default=<code>'auto'</code>):   Dictionary mapping sample names to <code>Condition;Replicate</code> values. If <code>'auto'</code>, it is inferred using <code>detective.alpacaWatson</code>.</p> </li> <li> <p><code>intensity_dict</code> (<code>dict</code> or <code>'auto'</code>, default=<code>'auto'</code>):   Dictionary mapping LFQ methods to their corresponding columns. Inferred automatically if set to <code>'auto'</code>.</p> </li> <li> <p><code>info_cols</code> (<code>list</code>, optional):   Columns containing additional metadata to retain. If <code>None</code>, selected based on common patterns.</p> </li> <li> <p><code>contamination_cols</code> (<code>list</code>, default=<code>['identified by site', 'contaminant', 'Reverse']</code>):   Columns used to identify and remove contaminants or reverse hits.</p> </li> <li> <p><code>cleaning</code> (<code>bool</code>, default=<code>True</code>):   Whether to filter out contaminants and reverse hits.</p> </li> <li> <p><code>formatting</code> (<code>str</code> or <code>bool</code>, default=<code>'auto'</code>):   Controls output format. If <code>True</code>, returns long-format data suitable for downstream processing.   If <code>'auto'</code>, formatting is inferred.</p> </li> <li> <p><code>transformation</code> (<code>callable</code>, default=<code>np.log2</code>):   Function used to transform intensity values (e.g., log transformation).</p> </li> <li> <p><code>normalization</code> (<code>str</code>, default=<code>None</code>):   Normalization method. Accepted values: <code>'None'</code>, <code>'Relative'</code>, <code>'Median'</code>, <code>'Quantile'</code>.</p> </li> <li> <p><code>valid_values</code> (<code>float</code>, default=<code>0.7</code>):   Minimum proportion of valid values (non-missing) required to retain a row per condition.</p> </li> <li> <p><code>imputation</code> (<code>str</code>, default=<code>''</code>):   Imputation method for missing values. Available options:   <code>'None'</code>, <code>'LOD'</code>, <code>'ND'</code>, <code>'kNN'</code>, <code>'LLS'</code>, <code>'SVD'</code>.   If empty, no imputation is applied.</p> </li> <li> <p><code>**imp_kwargs</code> (<code>dict</code>):   Additional keyword arguments passed to the imputation function, if specified.</p> </li> </ul> <p>Returns:</p> <ul> <li><code>pandas.DataFrame</code>:   A processed DataFrame, either in long format (for analysis and plotting) or wide format (for inspection), depending on the <code>formatting</code> parameter.</li> </ul> <p>Notes:</p> <ul> <li>Requires an intensity column and a way to define biological replicates.</li> <li>If any key components (<code>id_col</code>, <code>replicate_dict</code>, or <code>intensity_dict</code>) are set to <code>'auto'</code>, the function attempts to detect them automatically.</li> <li>Designed to integrate with the <code>alpaca</code> pipeline and its internal modules like <code>detective</code>, <code>tools</code>, <code>Imputation</code>, and <code>Normalization</code>.</li> </ul>"},{"location":"getting_started/","title":"Getting Started","text":"<p>Welcome to the documentation for alpaca_proteomics \ud83c\udf89</p> <p>This guide will help you install the package and set up your environment.</p>"},{"location":"getting_started/#1-install-the-package","title":"1. Install the package","text":"<pre><code>pip install alpaca_proteomics\n</code></pre>"},{"location":"getting_started/#2-import-the-package","title":"2. Import the package","text":"<pre><code>from alpaca_proteomics import alpaca \n</code></pre>"},{"location":"getting_started/#requirements","title":"\ud83e\udde9 Requirements","text":"<p>Before installing, make sure you have the following:</p> <ul> <li>Python 3.8+</li> <li>pip</li> <li>(Optional) virtualenv</li> </ul> <p>You can check your Python version with:</p> <pre><code>bash\npython --version\n\ngit clone https://github.com/borfebor/alpaca_proteomics.git\ncd alpaca_proteomics\npip install -e .\n\npython -c \"import alpaca_proteomics; print(alpaca_proteomics.__version__)\"\n</code></pre>"},{"location":"integration/","title":"Data integration","text":""},{"location":"integration/#alpacawooldf-preparation","title":"<code>alpaca.wool(df, preparation)</code>","text":"<p>Integrates experimental preparation with the measured molar amounts. Applies enrichment factor corrections to a dataframe, converts amounts to molecules using Avogadro's number, and computes sample-specific and cell-specific molecule concentrations.</p> <p>Parameters:</p> <ul> <li> <p><code>df</code> (<code>pandas.DataFrame</code>):   DataFrame containing the quantified protein data (e.g., fmol values).</p> </li> <li> <p><code>preparation</code> (<code>pandas.DataFrame</code>):   DataFrame containing experimental setup and enrichment information (e.g., Enrichment factors, sample volumes).</p> </li> </ul> <p>Returns:</p> <ul> <li><code>df</code> (<code>pandas.DataFrame</code>):   Updated DataFrame with corrected fmol values and molecule counts.</li> </ul> <p>Notes:</p> <ul> <li>The function applies enrichment factor corrections based on whether the sample mode is amplification (for increased fraction) or sampling (for decreased fraction).</li> <li>The molecule counts are calculated using Avogadro's number for conversion from fmol to molecules.</li> <li>The function can also compute sample-specific and cell-specific concentrations based on the experimental setup provided in the <code>preparation</code> DataFrame.</li> </ul>"},{"location":"quant/","title":"\ud83d\udd22 Quantification","text":"<p>The quantification module of the ALPACA (Absolute Protein Quantification) proteomics pipeline is designed to facilitate the analysis of absolute protein quantification data. This Python-based tool streamlines the processing of mass spectrometry data, enabling researchers to accurately determine protein abundances in complex biological samples. By integrating with various proteomics data formats and employing robust statistical methods, the module ensures precise quantification, thereby enhancing the reliability of downstream analyses.</p> <p>This module is especially valuable for researchers working with large-scale proteomics datasets, as it simplifies the steps necessary to generate quantitative data that can be used for a wide range of biological insights.</p>"},{"location":"quant/#function-alpacacensus","title":"\ud83e\uddee Function: <code>alpaca.census()</code>","text":"<p>The primary function in the quantification module, <code>alpaca.census()</code>, is responsible for performing the absolute quantification of protein abundances using various statistical methods.</p>"},{"location":"quant/#alpacacensusdf-standards-concentration05-in_sample60-lfq_colibaq-ratio1-total_protein1-filter_colreplicate-added_samplesnone-valid_values0-plottrue-savefalse","title":"<code>alpaca.census(df, standards, concentration=0.5, in_sample=6.0, lfq_col='iBAQ', ratio=1, total_protein=1, filter_col='Replicate', added_samples=None, valid_values=0, plot=True, save=False)</code>","text":"<p>Performs protein quantification using regression between quantified protein intensities and dynamic standards (e.g., UPS2).</p> <p>Parameters:</p> <ul> <li> <p><code>df</code> (<code>pandas.DataFrame</code>):   DataFrame containing clean data for quantified proteins.</p> </li> <li> <p><code>standards</code> (<code>str</code> or file-like object):   Path to a file containing UPS2 dynamic standards information or the standards file itself (e.g., .csv, .txt, .xlsx).</p> </li> <li> <p><code>concentration</code> (<code>float</code>, optional, default=<code>0.5</code>):   Stock concentration of the standards in mg/mL.</p> </li> <li> <p><code>in_sample</code> (<code>float</code>, optional, default=<code>6.0</code>):   Volume (in microliters) of standards added to each sample.</p> </li> <li> <p><code>lfq_col</code> (<code>str</code>, optional, default=<code>'iBAQ'</code>):   Column name in <code>df</code> representing the label-free quantification (LFQ) values.</p> </li> <li> <p><code>ratio</code> (<code>float</code>, optional, default=<code>1</code>):   A multiplier for adjusting the calculated concentration of each protein.</p> </li> <li> <p><code>total_protein</code> (<code>float</code>, optional, default=<code>1</code>):   Total protein concentration in the sample.</p> </li> <li> <p><code>filter_col</code> (<code>str</code>, optional, default=<code>'Replicate'</code>):   Column name used to filter data for specific replicates or conditions.</p> </li> <li> <p><code>added_samples</code> (<code>list</code>, optional, default=<code>None</code>):   List of samples or conditions where standards were added. If <code>None</code>, assumes standards were added to all samples.</p> </li> <li> <p><code>valid_values</code> (<code>int</code>, optional, default=<code>2</code>):   Minimum number of valid (non-missing) values required for regression.</p> </li> <li> <p><code>plot</code> (<code>bool</code>, optional, default=<code>True</code>):   Whether to generate and display regression plots.</p> </li> <li> <p><code>save</code> (<code>bool</code>, optional, default=<code>False</code>):   Whether to save the regression plots.</p> </li> </ul> <p>Returns:</p> <ul> <li> <p><code>df</code> (<code>pandas.DataFrame</code>):   DataFrame with quantified proteins, adjusted for concentration.</p> </li> <li> <p><code>ups_red</code> (<code>pandas.DataFrame</code>):   DataFrame containing measured standards in the sample.</p> </li> <li> <p><code>coef</code> (<code>float</code>):   Regression slope used for quantification.</p> </li> <li> <p><code>inter</code> (<code>float</code>):   Regression intercept used for quantification.</p> </li> <li> <p><code>R2</code> (<code>float</code>):   R-squared value representing the goodness-of-fit for the regression.</p> </li> </ul> <p>Notes:</p> <ul> <li>The function performs regression analysis between protein intensities in <code>df</code> and spiked-in dynamic standards (e.g., UPS2) to quantify proteins.</li> <li>It provides an option to visualize and save regression plots.</li> <li>A low R\u00b2 value (less than 0.8) indicates a poor fit for the regression and should be carefully reviewed.</li> </ul>"},{"location":"quant/#signature","title":"\ud83e\uddfe Signature","text":"<p><code>`python alpaca.census(data, method=\"sum\", target_protein=\"total_protein\", normalize=False)</code></p>"}]}